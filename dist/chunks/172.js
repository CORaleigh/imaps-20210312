(self.webpackChunkimaps=self.webpackChunkimaps||[]).push([[172],{80172:(s,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});var r=t(39105),o=t(52937),i=(t(36348),t(42766)),l=t(8985),c=t(44464),n=t(9628);const a=class{async decode(s){const e=await(0,l.J)(s.data,s.options);return e&&e.toJSON()}symbolize(s){s.pixelBlock=i.Z.fromJSON(s.pixelBlock),s.extent=s.extent?o.Z.fromJSON(s.extent):null;const e=this.symbolizer.symbolize(s);return(0,r.DB)(e&&e.toJSON())}async updateSymbolizer(s){var e;this.symbolizer=n.Z.fromJSON(s.symbolizerJSON),s.histograms&&"rasterStretch"===(null==(e=this.symbolizer)?void 0:e.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=s.histograms)}stretch(s){const e=this.symbolizer.simpleStretch(i.Z.fromJSON(s.srcPixelBlock),s.stretchParams);return(0,r.DB)(e&&e.toJSON())}estimateStatisticsHistograms(s){const e=(0,c.Hv)(i.Z.fromJSON(s.srcPixelBlock));return(0,r.DB)(e)}split(s){const e=(0,c.Vl)(i.Z.fromJSON(s.srcPixelBlock),s.tileSize,s.maximumPyramidLevel);return e&&e.forEach(((s,t)=>{e.set(t,null==s?void 0:s.toJSON())})),(0,r.DB)(e)}async mosaicAndTransform(s){const e=s.srcPixelBlocks.map((s=>s?new i.Z(s):null)),t=(0,c.us)(e,s.srcMosaicSize);if(!s.coefs)return t&&t.toJSON();const r=(0,c.Uk)(t,s.destDimension,s.coefs,s.sampleSpacing,s.interpolation);return r&&r.toJSON()}}}}]);
//# sourceMappingURL=172.js.map